import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as d,e as r}from"./app-db7b86cf.js";const a={},s=r('<h1 id="note" tabindex="-1"><a class="header-anchor" href="#note" aria-hidden="true">#</a> Note</h1><p>This test is severely outdated and is not indicative.</p><h1 id="test-environment" tabindex="-1"><a class="header-anchor" href="#test-environment" aria-hidden="true">#</a> Test Environment</h1><ul><li>System: Linux core 3.16.0-7-amd64 #1 SMP Debian 3.16.59-1 (2018-10-03) x86_64 GNU/Linux</li><li>Memory: 15GB</li><li>CPU: Intel(R) Xeon(R) CPU E3-1220 v5 @ 3.00GHz; 4 cores</li><li>Network: Gigabit Ethernet</li><li>The test is conducted by accessing the server through a loopback network on the test client.</li></ul><h1 id="test-tools" tabindex="-1"><a class="header-anchor" href="#test-tools" aria-hidden="true">#</a> Test Tools</h1><p>ZLMeidaKit comes with a test benchmark program called test_benchmark, which uses a single-process multi-threaded model.</p><h1 id="test-server" tabindex="-1"><a class="header-anchor" href="#test-server" aria-hidden="true">#</a> Test Server</h1><p>ZLMeidaKit includes a test server called test_server, which supports RTSP/RTMP/HLS protocols and uses a multi-threaded model.</p><h1 id="test-media-stream" tabindex="-1"><a class="header-anchor" href="#test-media-stream" aria-hidden="true">#</a> Test Media Stream</h1><p>The test_server pulls an RTMP stream <code>rtmp://live.hkstv.hk.lxdns.com/live/hks1</code> and then forwards it using the test_server. The approximate bitrate of the stream is around 300-400 Kbit/s.</p><h1 id="test-results" tabindex="-1"><a class="header-anchor" href="#test-results" aria-hidden="true">#</a> Test Results</h1><p>Note: When building with CMake, use the command <code>cmake .. -DCMAKE_BUILD_TYPE=Release</code> to compile the optimized version.</p><table><thead><tr><th>Number of Players (RTMP)</th><th>CPU (Max 400%)</th><th>Memory (VIRT/RES)</th><th>Bandwidth (Average)</th><th>Packet Loss</th></tr></thead><tbody><tr><td>1000</td><td>20%</td><td>702M/13M</td><td>40 MByte/s</td><td>None</td></tr><tr><td>2000</td><td>39%</td><td>702M/18M</td><td>80 MByte/s</td><td>None</td></tr><tr><td>5000</td><td>92%</td><td>702M/32M</td><td>200 MByte/s</td><td>None</td></tr><tr><td>10000</td><td>170%</td><td>702M/59M</td><td>400 MByte/s</td><td>None</td></tr></tbody></table><table><thead><tr><th>Number of Players (RTSP/TCP)</th><th>CPU (Max 400%)</th><th>Memory (VIRT/RES)</th><th>Bandwidth (Average)</th><th>Packet Loss</th></tr></thead><tbody><tr><td>1000</td><td>18%</td><td>702M/13M</td><td>42 MByte/s</td><td>None</td></tr><tr><td>2000</td><td>35%</td><td>702M/19M</td><td>82 MByte/s</td><td>None</td></tr><tr><td>5000</td><td>80%</td><td>702M/35M</td><td>198 MByte/s</td><td>None</td></tr><tr><td>10000</td><td>130%</td><td>702M/62M</td><td>405 MByte/s</td><td>None</td></tr></tbody></table><h1 id="comparison-with-srs-performance" tabindex="-1"><a class="header-anchor" href="#comparison-with-srs-performance" aria-hidden="true">#</a> Comparison with SRS Performance</h1><table><thead><tr><th>Number of Players (RTMP)</th><th>CPU (Max 400%)</th><th>Memory (VIRT/RES)</th><th>Bandwidth (Average)</th><th>Packet Loss</th></tr></thead><tbody><tr><td>1000</td><td>10%</td><td>310M/53M</td><td>41.17 MByte/s</td><td>None</td></tr><tr><td>2000</td><td>18%</td><td>604M/117M</td><td>83.86 MByte/s</td><td>None</td></tr></tbody></table>',16),h=[s];function o(i,n){return e(),d("div",null,h)}const m=t(a,[["render",o],["__file","benchmark.html.vue"]]);export{m as default};
