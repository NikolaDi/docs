import{_ as c}from"./vs_code_zh-92e18943.js";import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o,c as r,a,d as n,b as s,w as l,e}from"./app-ceaceb0e.js";const u={},m=e(`<h2 id="_1、获取代码" tabindex="-1"><a class="header-anchor" href="#_1、获取代码" aria-hidden="true">#</a> 1、获取代码</h2><p><strong>请不要使用github 下载zip包的方式下载源码</strong>，务必使用git克隆ZLMediaKit的代码，因为ZLMediaKit依赖于第三方代码，zip包不会下载第三方依赖源码，你可以这样操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#国内用户推荐从同步镜像网站gitee下载 </span>
<span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://gitee.com/xia-chu/ZLMediaKit
<span class="token builtin class-name">cd</span> ZLMediaKit
<span class="token comment">#千万不要忘记执行这句命令</span>
<span class="token function">git</span> submodule update <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、强烈推荐" tabindex="-1"><a class="header-anchor" href="#_2、强烈推荐" aria-hidden="true">#</a> 2、强烈推荐</h2><p>如果你是位新手，强烈建议使用ubuntu16或更新版本编译ZLMediaKit，macOS是次选推荐平台，最不推荐的是centos6.*或windows平台。</p>`,5),v=e(`<h2 id="_3、编译器" tabindex="-1"><a class="header-anchor" href="#_3、编译器" aria-hidden="true">#</a> 3、编译器</h2><h3 id="_3-1、编译器版本要求" tabindex="-1"><a class="header-anchor" href="#_3-1、编译器版本要求" aria-hidden="true">#</a> 3.1、编译器版本要求</h3><p>ZLMediaKit采用了C++11的语法和库，要求编译器支持完整的C++11标准，亦即：</p><ul><li>linux上要求gcc 版本 &gt;= 4.8(4.7应该也能支持)</li><li>macOS上clang &gt;= ???（我也不知道，估计大部分不会遇到这个问题）</li><li>windows 上visual stuido &gt;= 2015(vs2013某些版本也能编译通过，如果怕麻烦建议直接vs2017)</li></ul><h3 id="_3-2、安装编译器" tabindex="-1"><a class="header-anchor" href="#_3-2、安装编译器" aria-hidden="true">#</a> 3.2、安装编译器</h3><ul><li><p>如果你是debian系操作系统(包括ubuntu系用户)，一般自带的gcc版本够新，你可以这样安装gcc编译器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果你是centos7或以上用户，你可以这样安装gcc编译器：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>sudo yum <span class="token operator">-</span>y install gcc
sudo yum <span class="token operator">-</span>y install gcc<span class="token operator">-</span>c<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果你是centos6.*用户，你可以这样安装gcc编译器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> centos-release-scl <span class="token parameter variable">-y</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> devtoolset-4-toolchain <span class="token parameter variable">-y</span>
<span class="token comment">#切换到高版本gcc</span>
scl <span class="token builtin class-name">enable</span> devtoolset-4 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果你是macOS用户，你直接安装xcode即可。</p></li><li><p>如果你是windows用户，推荐安装vs2017或以上。</p></li></ul><h2 id="_4、cmake" tabindex="-1"><a class="header-anchor" href="#_4、cmake" aria-hidden="true">#</a> 4、cmake</h2><p>ZLMediaKit采用cmake来构建项目，通过cmake才能生成Makefile(或Xcode/VS工程)，所以必须先安装cmake才能完成后续步骤。</p><ul><li><p>如果你是debian系操作系统(包括ubuntu系用户)，一般自带的cmake版本够新，你可以这样安装cmake</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果你是centos7或以上用户，你也许可以这样安装cmake:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>sudo yum <span class="token operator">-</span>y install cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果你是centos6.*用户，那么你需要下载新版本的cmake源码然后编译安装cmake</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/Kitware/CMake/releases/download/v3.17.0-rc3/cmake-3.17.0-rc3.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> cmake-3.17.0-rc3.tar.gz
<span class="token builtin class-name">cd</span> cmake-3.17.0-rc3
./configure
<span class="token function">make</span> <span class="token parameter variable">-j4</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果你是macOS用户，你可以这样安装cmake:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果你是windows用户，并且vs版本为2017及以上，你不用单独安装cmake，否则你需要安装cmake-gui:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#安装win64版本cmake</span>
https://github.com/Kitware/CMake/releases/download/v3.17.0-rc3/cmake-3.17.0-rc3-win64-x64.zip

<span class="token comment">#安装win32版本cmake</span>
https://github.com/Kitware/CMake/releases/download/v3.17.0-rc3/cmake-3.17.0-rc3-win32-x86.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_5、依赖库" tabindex="-1"><a class="header-anchor" href="#_5、依赖库" aria-hidden="true">#</a> 5、依赖库</h2><h3 id="_5-1、依赖库列表" tabindex="-1"><a class="header-anchor" href="#_5-1、依赖库列表" aria-hidden="true">#</a> 5.1、依赖库列表</h3><p>ZLMediaKit可选依赖一些第三方库，这些库都不是必选的；在构建ZLMediaKit时，cmake能查找系统路径中的这些库，并根据安装情况选择是否开启相关特性，你可以选择安装这些依赖并启用相关特性：</p><ul><li><p>openssl</p><ul><li><p>flash player在播放rtmp时，采用的是复杂握手模式，如果不安装该库，flash player将播放不了zlmediakit 提供的rtmp url.</p></li><li><p>同时ZLMediaKit的https/rtsps/webrtc相关功能需要使用openssl才能开启。</p></li></ul></li><li><p>ffmpeg</p><p>zlmediakit可以通过fork ffmpeg进程的方式实现多种协议的拉流，编译时不需要安装FFmpeg。</p></li><li><p>sdl、avcodec、avutil</p><p>这3个库供ZLMediaKit的test_player测试程序使用，你通常不需要安装这3个库。</p></li></ul><h3 id="_5-2、安装依赖库" tabindex="-1"><a class="header-anchor" href="#_5-2、安装依赖库" aria-hidden="true">#</a> 5.2、安装依赖库</h3>`,14),b=e(`<li><p>Debian系(包括ubuntu）系统下安装依赖的方法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#除了openssl,其他其实都可以不安装</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libssl-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libsdl-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libavcodec-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libavutil-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ffmpeg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),h={href:"https://blog.51cto.com/mengix/2452395",target:"_blank",rel:"noopener noreferrer"},k=a("li",null,[a("p",null,"macOS/centos下安装依赖库："),a("p",null,"基本安装方式跟Debian系安装差不多，安装命令分别改成brew / yum即可。但是有些库名字与Debian系不太一样，请自行查找相关资料。")],-1),g=a("p",null,"windows下安装依赖库",-1),_=a("p",null,"安装openssl",-1),f={href:"http://slproweb.com/products/Win32OpenSSL.html",target:"_blank",rel:"noopener noreferrer"},x=a("h2",{id:"_6、构建和编译项目",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_6、构建和编译项目","aria-hidden":"true"},"#"),n(" 6、构建和编译项目")],-1),w=e(`<li><p>在linux或macOS系统下,你应该这样操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ZLMediaKit
<span class="token function">mkdir</span> build
<span class="token builtin class-name">cd</span> build
<span class="token comment">#macOS下可能需要这样指定openss路径：cmake .. -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl/1.0.2j/</span>
cmake <span class="token punctuation">..</span>
<span class="token function">make</span> <span class="token parameter variable">-j4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),M=e(`<p>在windows系统下</p><ul><li><p>如果你是vs2017或以上，可以在vs菜单栏中直接打开项目文件夹：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>文件<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> <span class="token punctuation">[</span>打开<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> <span class="token punctuation">[</span>文件夹<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> <span class="token punctuation">[</span>选择ZLMediaKit代码根目录并打开<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><figure><img src="`+c+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>',3),L=e(`<li><p>如果你是vs2017以下版本，你需要使用cmake-gui生成vs工程然后编译：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span> 进入ZLMediaKit目录执行 <span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> 以下载ZLToolKit的代码
<span class="token number">2</span> 使用cmake-gui打开工程并生成vs工程文件.
<span class="token number">3</span> 找到工程文件<span class="token punctuation">(</span>ZLMediaKit.sln<span class="token punctuation">)</span>,双击用vs2017打开.
<span class="token number">4</span> 选择编译Release 版本.
<span class="token number">5</span> 找到目标文件并运行测试用例.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),K=a("li",null,[a("p",null,"如果你要编译Android版本，你可以自己在Android Studio中打开Android目录。")],-1),Z={href:"https://www.jianshu.com/p/44c21296add5",target:"_blank",rel:"noopener noreferrer"},S=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ZLMediaKit
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> build
<span class="token builtin class-name">cd</span> build
<span class="token comment"># 生成Xcode工程，工程文件在build目录下</span>
cmake <span class="token punctuation">..</span> <span class="token parameter variable">-G</span> Xcode <span class="token parameter variable">-DCMAKE_TOOLCHAIN_FILE</span><span class="token operator">=</span><span class="token punctuation">..</span>/cmake/ios.toolchain.cmake  <span class="token parameter variable">-DPLATFORM</span><span class="token operator">=</span>OS64COMBINED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),z=a("h2",{id:"_7、运行",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_7、运行","aria-hidden":"true"},"#"),n(" 7、运行")],-1),O=a("p",null,"ZLMediaKit工程主要生成3种二进制目标文件，他们的生成的路径在release目录下，这些目标文件主要分为：",-1),y=a("p",null,"MediaServer进程",-1),D=a("br",null,null,-1),C=e(`<ul><li><p>在linux下启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ZLMediaKit/release/linux/Debug
<span class="token comment">#通过-h可以了解启动参数</span>
./MediaServer <span class="token parameter variable">-h</span>
<span class="token comment">#以守护进程模式启动</span>
./MediaServer <span class="token parameter variable">-d</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在macos下启动：</p><p>目标文件目录在ZLMediaKit/mac/Debug,其他操作完全一致。</p></li><li><p>在window下启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span> 进入ZLMediaKit/release/windows/Debug目录
<span class="token number">2</span> 双击MediaServer启动
<span class="token number">3</span> 你也可以在cmd或powershell中启动，通过MediaServer -h了解启动参数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),E=e(`<li><p>c api 的SDK</p><p>ZLMediaKit也提供c的api二次开发sdk库，头文件在<code>ZLMediaKit/api/include</code>,库文件为：</p><ul><li><p>linux下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ZLMediaKit/release/linux/Debug/libmk_api.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>macOS下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ZLMediaKit/release/linux/mac/libmk_api.dylib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>windows下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ZLMediaKit/release/windows/Debug/mk_api.dll
ZLMediaKit/release/windows/Debug/mk_api.lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>SDK头文件有详细的注释，一般足够二次开发使用。</p></li></ul></li><li><p>以<code>test_</code>开头的测试程序</p><p>相关代码在<code>ZLMediaKit/tests</code>目录下，你可以对照代码启动测试进程。</p></li>`,2),A=a("h2",{id:"_8、测试",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_8、测试","aria-hidden":"true"},"#"),n(" 8、测试")],-1);function I(N,R){const i=d("RouterLink"),t=d("ExternalLinkIcon");return o(),r("div",null,[m,a("p",null,[n("zlmediakit已上架vcpkg，便捷安装请参考"),s(i,{to:"/zh/guide/install/install_zlmediakit_using_vcpkg.html"},{default:l(()=>[n("vcpkg安装zlmediakit")]),_:1})]),v,a("ul",null,[b,a("li",null,[a("p",null,[n("centos6.*的用户可以参考该"),a("a",h,[n("文章"),s(t)])])]),k,a("li",null,[g,a("ul",null,[a("li",null,[_,a("p",null,[n("请从"),a("a",f,[n("网站"),s(t)]),n("中下载。")])])])])]),x,a("p",null,[n("由于开启webrtc相关功能比较复杂，默认是不开启编译的，如果你对zlmediakit的webrtc功能比较感兴趣，可以参考"),s(i,{to:"/zh/guide/protocol/webrtc/webrtc_compilation_and_use.html"},{default:l(()=>[n("这里")]),_:1})]),a("ul",null,[w,a("li",null,[M,a("ul",null,[L,a("li",null,[a("p",null,[n("同时，Windows编译也可以参考"),s(i,{to:"/zh/guide/install/compilation_instructions_for_windows_version.html"},{default:l(()=>[n("这里")]),_:1})])])])]),K,a("li",null,[a("p",null,[n("如果你要编译ios版本，可以生成xcode工程然后编译c api的静态库;另外，你可以参考此"),a("a",Z,[n("文档"),s(t)])]),S])]),z,O,a("ul",null,[a("li",null,[y,a("p",null,[n("这是ZLMediaKit作为服务器的主进程，该进程可以在免去开发的情况下直接作为测试流媒体服务器使用，如果你需要更复杂的业务逻辑，可以通过[Web HOOK](../guide/media_server/web_hook_api."),D,n(" md)和"),s(i,{to:"/zh/guide/media_server/restful_api.html"},{default:l(()=>[n("RESTful API")]),_:1}),n("实现,同时你可以通过"),s(i,{to:"/zh/guide/media_server/config_file.html"},{default:l(()=>[n("配置文件")]),_:1}),n("控制其参数。")]),C]),E]),A,a("p",null,[n("请参考"),s(i,{to:"/zh/guide/media_server/push_test.html"},{default:l(()=>[n("此文章")]),_:1}),n("完成推流播放测试")])])}const B=p(u,[["render",I],["__file","start.html.vue"]]);export{B as default};
