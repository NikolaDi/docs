import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as c,c as l,a as s,d as e,b as a,e as i}from"./app-5e987558.js";const t={},r=s("h1",{id:"基于-scoop-vcpkg-的-windows-版编译说明",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#基于-scoop-vcpkg-的-windows-版编译说明","aria-hidden":"true"},"#"),e(" 基于 scoop + vcpkg 的 Windows 版编译说明")],-1),p={href:"https://github.com/lukesampson/scoop",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/microsoft/vcpkg",target:"_blank",rel:"noopener noreferrer"},u=s("code",null,"ZLMediaKit",-1),g=i(`<ul><li><code>scoop</code>: Windows 命令行下使用的软件包安装管理工具;</li><li><code>vcpkg</code>: 微软发起的 C++ 库管理器, 其中有大量常用开源库;</li></ul><p>由于可以在命令行下使用, 可以非常方便的进行自动化集成. 推荐大家试用.</p><p><strong>以下步骤仅在 Windows 10 下测试, 未使用其他 Windows 版本进行测试, 不保证其他 Windows 版本的可用性.</strong></p><p><strong>以下所有操作如无特殊说明均需在 PowerShell 命令行下进行.</strong></p><h2 id="基于-scoop-及-vcpkg-安装编译依赖" tabindex="-1"><a class="header-anchor" href="#基于-scoop-及-vcpkg-安装编译依赖" aria-hidden="true">#</a> 基于 scoop 及 vcpkg 安装编译依赖</h2><h3 id="下载安装-scoop-并使用-scoop-安装依赖工具" tabindex="-1"><a class="header-anchor" href="#下载安装-scoop-并使用-scoop-安装依赖工具" aria-hidden="true">#</a> 下载安装 scoop 并使用 scoop 安装依赖工具</h3><p>以下是为了安装依赖工具 <code>cmake</code> 和 <code>ninja</code>(可选, 但建议安装), 如已安装, 可跳过.</p><p>具体可参考其官网说明, 以下仅列出相关简要步骤.</p><ol><li>设置环境变量 <code>SCOOP</code>, 用于配置 <code>scoop</code> 的下载安装目录(包括其管理的软件包):<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$env:SCOOP = &#39;C:\\work\\develop\\scoop&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>为当前用户设置允许执行 <code>powershell</code> 脚本:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>安装 <code>scoop</code>:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>iwr -useb get.scoop.sh | iex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>为 <code>scoop</code> 添加 <code>extras</code> 软件仓库:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>scoop bucket add extras
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>安装 <code>cmake</code> 及 <code>ninja</code>:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>scoop install cmake ninja
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>为方便后续使用, 需将 <code>C:\\work\\develop\\scoop</code> 设置到环境变量 <code>SCOOP</code> 中, 将 <code>C:\\work\\develop\\scoop\\shims</code> 追加到环境变量 <code>PATH</code> 中, 方法可自行查询.</p><h3 id="下载配置-vcpkg-并使用-vcpkg-安装依赖库" tabindex="-1"><a class="header-anchor" href="#下载配置-vcpkg-并使用-vcpkg-安装依赖库" aria-hidden="true">#</a> 下载配置 vcpkg 并使用 vcpkg 安装依赖库</h3><p>以下是为了安装相关依赖库, 具体包括: <code>openssl</code> 以及 <code>libsrtp</code>, 其他可选依赖(如: <code>ffmpeg</code>)也应可安装, 暂未测试.</p>`,12),m=s("code",null,"vcpkg",-1),b={href:"https://github.com/microsoft/vcpkg",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md",target:"_blank",rel:"noopener noreferrer"},_=i(`<ol><li>下载 <code>vcpkg</code>, 其中包括各种配置脚本以及开源库的编译脚本, 下载路径假设为: <code>C:\\work\\develop</code>, 执行:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone https://github.com/microsoft/vcpkg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>下载预编译的 <code>vcpkg</code> 包管理工具:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.\\vcpkg\\bootstrap-vcpkg.bat -disableMetrics
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>编译 <code>openssl</code>:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.\\vcpkg\\vcpkg.exe install --triplet=x64-windows-static openssl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>编译 <code>libsrtp</code>, 需要 <code>ENABLE_OPENSSL</code>, 可编辑 <code>C:\\work\\develop\\vcpkg\\ports\\libsrtp\\portfile.cmake</code>, 修改 <code>vcpkg_configure_cmake</code> 为如下:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vcpkg_configure_cmake(
  SOURCE_PATH \${SOURCE_PATH}
  PREFER_NINJA
  OPTIONS
    -DENABLE_OPENSSL:BOOL=ON
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>然后进行编译:<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.\\vcpkg\\vcpkg.exe install --triplet=x64-windows-static libsrtp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h2><p>从开始菜单中打开 vs2015/2017/2019 的开发者命令行模式, 默认未找到基于 <code>powershell</code> 的 x64 位版本, 可先使用 <code>cmd</code> 版本, 然后执行 <code>powershell</code> 切换到 <code>powershell</code>.</p><ol><li>编译 ZLMediaKit<div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>mkdir build
cd build
<span class="token variable">$VCPKG_CMAKE</span> = <span class="token string">&#39;C:\\work\\develop\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake&#39;</span>
<span class="token variable">$VCPKG_INSTALL_PATH</span> = <span class="token string">&#39;C:\\work\\develop\\vcpkg\\installed\\x64-windows-static&#39;</span>

<span class="token variable">$CMAKE_OPTIONS</span> = @<span class="token punctuation">(</span>
    <span class="token string">&quot;-GCodeBlocks - Ninja&quot;</span>
    <span class="token string">&quot;-DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo&quot;</span>
    <span class="token string">&quot;-DCMAKE_C_COMPILER:STRING=cl.exe&quot;</span>
    <span class="token string">&quot;-DCMAKE_CXX_COMPILER:STRING=cl.exe&quot;</span>
    <span class="token string">&quot;-DCMAKE_TOOLCHAIN_FILE:FILEPATH=<span class="token variable">$VCPKG_CMAKE</span>&quot;</span>
    <span class="token string">&quot;-DCMAKE_PREFIX_PATH:FILEPATH=<span class="token variable">$VCPKG_INSTALL_PATH</span>&quot;</span>
    <span class="token string">&quot;-DVCPKG_TARGET_TRIPLET:STRING=x86-windows-static&quot;</span>
    <span class="token string">&quot;-DENABLE_WEBRTC:BOOL=ON&quot;</span>
<span class="token punctuation">)</span>
cmake <span class="token punctuation">.</span><span class="token punctuation">.</span> @CMAKE_OPTIONS
cmake <span class="token operator">--</span>build <span class="token punctuation">.</span> <span class="token operator">--</span>target all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>编译 64 位程序在链接 <code>openssl</code> 时还需要链接 <code>Crypt32.lib</code> 和 <code>ws2_32.lib</code>, 正常在执行 <code>cmake .. @CMAKE_OPTIONS</code> 时有类似输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>found library:C:/work/develop/vcpkg/installed/x64-windows-static/lib/libssl.lib;C:/work/develop/vcpkg/installed/x64-windows-static/lib/libcrypto.lib;Crypt32.lib;ws2_32.lib,ENABLE_OPENSSL defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有 <code>Crypt32.lib;ws2_32.lib</code>, 可手动修改 <code>CMakeLists.txt</code> 进行解决(可搜索 <code>OPENSSL_LIBRARIES</code> 找到对应位置).</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">list</span><span class="token punctuation">(</span>APPEND LINK_LIB_LIST <span class="token punctuation">\${</span>OPENSSL_LIBRARIES<span class="token punctuation">}</span> Crypt32.lib ws2_32.lib<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8);function h(x,w){const n=d("ExternalLinkIcon");return c(),l("div",null,[r,s("p",null,[e("以下为基于 "),s("a",p,[e("scoop"),a(n)]),e(" + "),s("a",v,[e("vcpkg"),a(n)]),e(" 编译 "),u,e(" 的一种方式.")]),g,s("p",null,[m,e(" 具体使用可参考"),s("a",b,[e("官方说明"),a(n)]),e(", "),s("a",k,[e("官方说明中文版"),a(n)]),e(".")]),_])}const P=o(t,[["render",h],["__file","compilation_instructions_for_windows_version.html.vue"]]);export{P as default};
