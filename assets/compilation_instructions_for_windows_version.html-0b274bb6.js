import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as l,c as t,a as n,d as e,b as s,e as i}from"./app-4151e1aa.js";const c={},r=n("h1",{id:"building-instructions-for-windows",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#building-instructions-for-windows","aria-hidden":"true"},"#"),e(" Building Instructions for Windows")],-1),p=n("code",null,"ZLMediaKit",-1),u={href:"https://github.com/lukesampson/scoop",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/microsoft/vcpkg",target:"_blank",rel:"noopener noreferrer"},m=i(`<ul><li><code>scoop</code>: A package installation manager for Windows command-line.</li><li><code>vcpkg</code>: A C++ library manager initiated by Microsoft, which includes many commonly used open-source libraries.</li></ul><p>Since these tools can be used from the command line, they enable convenient automation and integration. We recommend giving them a try.</p><p><strong>Please note that the following steps have only been tested on Windows 10 and may not work on other Windows versions.</strong></p><p><strong>Unless specified otherwise, all operations should be performed in PowerShell command line.</strong></p><h2 id="installing-build-dependencies-using-scoop-and-vcpkg" tabindex="-1"><a class="header-anchor" href="#installing-build-dependencies-using-scoop-and-vcpkg" aria-hidden="true">#</a> Installing Build Dependencies using scoop and vcpkg</h2><h3 id="download-and-install-scoop-and-use-scoop-to-install-dependency-tools" tabindex="-1"><a class="header-anchor" href="#download-and-install-scoop-and-use-scoop-to-install-dependency-tools" aria-hidden="true">#</a> Download and Install scoop, and use scoop to install dependency tools</h3><p>The following steps are for installing the dependency tools <code>cmake</code> and <code>ninja</code> (optional but recommended) using scoop. If you already have them installed, you can skip these steps.</p><p>For detailed instructions, please refer to the official scoop documentation. Below are the summarized steps:</p><ol><li><p>Set the environment variable <code>SCOOP</code> to configure the download and installation directory for <code>scoop</code> (including the managed software packages). Run the following command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$env:SCOOP = &#39;C:\\work\\develop\\scoop&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Allow the execution of PowerShell scripts for the current user by running the following command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Install <code>scoop</code> by running the following command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>iwr -useb get.scoop.sh | iex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Add the <code>extras</code> software repository to <code>scoop</code> by running the following command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>scoop bucket add extras
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Install <code>cmake</code> and <code>ninja</code> by running the following command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>scoop install cmake ninja
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>For convenience, you should set <code>C:\\work\\develop\\scoop</code> as the value for the <code>SCOOP</code> environment variable and append <code>C:\\work\\develop\\scoop\\shims</code> to the <code>PATH</code> environment variable. You can search for the appropriate method to do this.</p><h3 id="download-and-configure-vcpkg-and-use-vcpkg-to-install-library-dependencies" tabindex="-1"><a class="header-anchor" href="#download-and-configure-vcpkg-and-use-vcpkg-to-install-library-dependencies" aria-hidden="true">#</a> Download and Configure vcpkg, and use vcpkg to install library dependencies</h3><p>The following steps are for installing the required library dependencies, including <code>openssl</code> and <code>libsrtp</code>. Other optional dependencies (e.g., <code>ffmpeg</code>) should also be installable but have not been tested yet.</p>`,12),g=n("code",null,"vcpkg",-1),b={href:"https://github.com/microsoft/vcpkg",target:"_blank",rel:"noopener noreferrer"},h=i(`<ol><li><p>Download <code>vcpkg</code>, which includes various configuration scripts and build scripts for open-source libraries. Assume the download path is <code>C:\\work\\develop</code>. Run the following command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone https://github.com/microsoft/vcpkg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Download the precompiled <code>vcpkg</code> package manager by running the following command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.\\vcpkg\\bootstrap-vcpkg.bat -disableMetrics
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Build <code>openssl</code> by running the following command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.\\vcpkg\\vcpkg.exe install --triplet=x64-windows-static openssl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Build <code>libsrtp</code> with <code>ENABLE_OPENSSL</code> enabled. Edit <code>C:\\work\\develop\\vcpkg\\ports\\libsrtp\\portfile.cmake</code> and modify <code>vcpkg_configure_cmake</code> as follows:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vcpkg_configure_cmake(
  SOURCE_PATH \${SOURCE_PATH}
  PREFER_NINJA
  OPTIONS
    -DENABLE_OPENSSL:BOOL=ON
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, build <code>libsrtp</code> by running the following command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.\\vcpkg\\vcpkg.exe install --triplet=x64-windows-static libsrtp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="building" tabindex="-1"><a class="header-anchor" href="#building" aria-hidden="true">#</a> Building</h2><p>Open the developer command prompt for vs2015/2017/2019 from the Start menu. If you can&#39;t find the 64-bit version based on <code>powershell</code>, you can use the <code>cmd</code> version first, and then switch to <code>powershell</code> by running the <code>powershell</code> command.</p><ol><li><p>Build ZLMediaKit by running the following PowerShell commands:</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>mkdir build
cd build
<span class="token variable">$VCPKG_CMAKE</span> = <span class="token string">&#39;C:\\work\\develop\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake&#39;</span>
<span class="token variable">$VCPKG_INSTALL_PATH</span> = <span class="token string">&#39;C:\\work\\develop\\vcpkg\\installed\\x64-windows-static&#39;</span>

<span class="token variable">$CMAKE_OPTIONS</span> = @<span class="token punctuation">(</span>
    <span class="token string">&quot;-GCodeBlocks - Ninja&quot;</span>
    <span class="token string">&quot;-DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo&quot;</span>
    <span class="token string">&quot;-DCMAKE_C_COMPILER:STRING=cl.exe&quot;</span>
    <span class="token string">&quot;-DCMAKE_CXX_COMPILER:STRING=cl.exe&quot;</span>
    <span class="token string">&quot;-DCMAKE_TOOLCHAIN_FILE:FILEPATH=<span class="token variable">$VCPKG_CMAKE</span>&quot;</span>
    <span class="token string">&quot;-DCMAKE_PREFIX_PATH:FILEPATH=<span class="token variable">$VCPKG_INSTALL_PATH</span>&quot;</span>
    <span class="token string">&quot;-DVCPKG_TARGET_TRIPLET:STRING=x86-windows-static&quot;</span>
    <span class="token string">&quot;-DENABLE_WEBRTC:BOOL=ON&quot;</span>
<span class="token punctuation">)</span>
cmake <span class="token punctuation">.</span><span class="token punctuation">.</span> @CMAKE_OPTIONS
cmake <span class="token operator">--</span>build <span class="token punctuation">.</span> <span class="token operator">--</span>target all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>To compile a 64-bit program and link <code>openssl</code>, you also need to link <code>Crypt32.lib</code> and <code>ws2_32.lib</code>. Normally, when executing <code>cmake .. @CMAKE_OPTIONS</code>, you should see similar output like this:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>found library:C:/work/develop/vcpkg/installed/x64-windows-static/lib/libssl.lib;C:/work/develop/vcpkg/installed/x64-windows-static/lib/libcrypto.lib;Crypt32.lib;ws2_32.lib,ENABLE_OPENSSL defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If <code>Crypt32.lib</code> and <code>ws2_32.lib</code> are not present, you can manually modify the <code>CMakeLists.txt</code> file to resolve the issue (search for <code>OPENSSL_LIBRARIES</code> to find the corresponding location).</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">list</span><span class="token punctuation">(</span>APPEND LINK_LIB_LIST <span class="token punctuation">\${</span>OPENSSL_LIBRARIES<span class="token punctuation">}</span> Crypt32.lib ws2_32.lib<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8);function k(f,w){const o=d("ExternalLinkIcon");return l(),t("div",null,[r,n("p",null,[e("Below are the instructions for building "),p,e(" on Windows using "),n("a",u,[e("scoop"),s(o)]),e(" + "),n("a",v,[e("vcpkg"),s(o)]),e(".")]),m,n("p",null,[e("For detailed usage of "),g,e(", please refer to the "),n("a",b,[e("official documentation"),s(o)]),e(".")]),h])}const y=a(c,[["render",k],["__file","compilation_instructions_for_windows_version.html.vue"]]);export{y as default};
